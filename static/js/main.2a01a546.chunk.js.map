{"version":3,"sources":["components/Image/index.js","components/Score/index.js","components/Memory/index.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","react_default","a","createElement","onClick","alt","name","src","image","Score","score","topScore","Memory","state","selected","imageClickHandler","event","_state","_this","_name","target","includes","console","log","setState","push","components_Score","this","components_Image","React","Component","App","components_Memory","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAceA,MAZf,SAAeC,GACb,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEC,QAASJ,EAAMI,QACfC,IAAKL,EAAMM,KACXC,IAAKP,EAAMQ,UCEJC,MARf,SAAeT,GACb,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBAAYH,EAAMU,MAAlB,eAAqCV,EAAMW,YCoDlCC,6MAnDbC,MAAQ,CACNC,SAAU,GACVJ,MAAO,EACPC,SAAU,KAGZI,kBAAoB,SAAAC,GAElB,IAAIC,EAASC,EAAKL,MACdM,EAAQH,EAAMI,OAAOf,IAErBY,EAAOH,SAASO,SAASF,IAE3BG,QAAQC,IAAI,aAERN,EAAON,SAAWM,EAAOP,QAC3BO,EAAON,SAAWM,EAAOP,OAG3BQ,EAAKM,SAAS,CACZV,SAAU,GACVJ,MAAO,EACPC,SAAUM,EAAON,aAKnBW,QAAQC,IAAI,gBAEZN,EAAOH,SAASW,KAAKN,GACrBF,EAAOP,QAEPQ,EAAKM,SAASP,6EAMhB,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuB,EAAD,CAAOhB,MAAOiB,KAAKd,MAAMH,MAAOC,SAAUgB,KAAKd,MAAMF,WACrDV,EAAAC,EAAAC,cAACyB,EAAD,CACExB,QAASuB,KAAKZ,kBACdT,KAAK,OACLE,MAAM,8EA9CKqB,IAAMC,WCMZC,MANf,WACE,OACE9B,EAAAC,EAAAC,cAAC6B,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2a01a546.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Image(props) {\n  return (\n    <div>\n      <img \n        onClick={props.onClick}\n        alt={props.name}\n        src={props.image}\n      />\n    </div>\n  );\n}\n\nexport default Image;\n","import React from \"react\";\n\nfunction Score(props) {\n  return (\n    <div>\n      <h2>Score: {props.score} Top Score: {props.topScore}</h2>\n    </div>\n  );\n}\n\nexport default Score;\n","import React from \"react\";\nimport Image from \"../Image\";\nimport Score from \"../Score\"\n\nclass Memory extends React.Component {\n\n  state = {\n    selected: [],\n    score: 0,\n    topScore: 0\n  };\n\n  imageClickHandler = event => {\n\n    let _state = this.state;\n    let _name = event.target.alt;\n\n    if (_state.selected.includes(_name)) {\n\n      console.log(\"game over\");\n\n      if (_state.topScore < _state.score) {\n        _state.topScore = _state.score\n      }\n\n      this.setState({ \n        selected: [],\n        score: 0,\n        topScore: _state.topScore\n      });\n\n    } else {\n      \n      console.log(\"update score\")\n      \n      _state.selected.push(_name);\n      _state.score++\n\n      this.setState(_state);\n\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Score score={this.state.score} topScore={this.state.topScore}/>\n        <Image \n          onClick={this.imageClickHandler}\n          name=\"test\"\n          image=\"https://images.dog.ceo/breeds/retriever-golden/n02099601_1633.jpg\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default Memory;\n","import React from 'react';\nimport './App.css';\nimport Memory from \"./components/Memory\";\n\nfunction App() {\n  return (\n    <Memory />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}